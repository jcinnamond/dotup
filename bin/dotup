#!/bin/bash

REPO='git@github.com:jcinnamond/dotup.git'

DOTUP_HOME=$HOME/.dotup
DOTFILE_DIR=$DOTUP_HOME/dotfiles
RESTORE_DIR=$DOTUP_HOME/restore

# The suppress file lives outside the dotup directory
# as it is not designed to be a local override.
SUPPRESS_FILE=$HOME/.suppress-dotup

progname=`basename $0`
command=$1
command_arg=$2

last_arg=${@: -1}

if [ X$last_arg == Xdebug ]; then
  DEBUGGING=1
else
  DEBUGGING=$DEBUG
fi

function debug {
  if [ $DEBUGGING ]; then
    printf "DEBUG: $1"
  fi
}

function usage {
  cat <<EOF
usage: $progname [command [options]]


COMMANDS:
  up       - setup or update the profile 
             (default if no command given)

  add      - move a file to $DOTFILE_DIR and create a symlink to it

  commit   - wrapper around 'cd $DOTFILE_DIR; git commit -a'

  push     - wrapper around 'cd $DOTFILE_DIR; git push'

  status   - warn about any updates or local modifications
             Add 'local' to only show modified files
             Add 'remote' to only show changes with origin
             (default is to show both)

  cleanup  - removes dangling symlinks to .dotup

  remove   - removes all symlinks to .dotup, restoring any original files
             $DOTUP_HOME is removed if it is safe to do so
EOF
}

function check_command {
  command=$1
  which $command > /dev/null 2>&1
  status=$?
  if [ $status -ne 0 ]; then
    printf "Unmet dependency: you need to install $command\n"
    exit 1
  fi
}

function check_dependencies {
  check_command git
}

function is_setup {
  test -d $DOTUP_HOME
}

function link_files {
  files=`find $DOTFILE_DIR -type f`
  for path in $files; do
    dir=`dirname $path | sed -e "s|$DOTFILE_DIR||"`
    file=`basename $path`
    symlink_dest=$HOME$dir/$file

    if [ -r "$SUPPRESS_FILE" ]; then
      search_dir=`echo $dir | sed -e 's|^/||'`
      if [ -z "$search_dir" ]; then
        search=$file
      else
        search=$search_dir/$file
      fi
      grep "^$search\$" $SUPPRESS_FILE > /dev/null 2>&1
      if [ $? -eq 0 ]; then
        debug "skipping suppressed file: $symlink_dest\n"
        continue
      fi
    fi

    # Backup existing files
    if [ -h $symlink_dest ]; then
      dest=`stat --format=%N $symlink_dest | sed -e "s/.*\\\`\(.*\)'$/\1/"`
      if [ $dest == $path ]; then
        debug "| $symlink_dest is already linked\n"
      else
        printf "$symlink_dest points somewhere else: skipping\n"
      fi
      continue
    elif [ -d $symlink_dest ]; then
      printf "can't install $symlink_dest: target already exists as a directory\n"
      continue
    elif [ -f $symlink_dest ]; then
      debug "& copying $symlink_dest to the restore directory\n"
      mkdir -p $RESTORE_DIR/$dir
      cp $symlink_dest $RESTORE_DIR/$dir
    fi

    debug "-> linking $path to $symlink_dest\n"

    if [ X$dir != X  -a ! -d $HOME/$dir ]; then
      mkdir -p $HOME/$dir
    fi

    ln -sf $path $symlink_dest
  done
}

function run_scripts {
  dir=$1

  scripts=`find $dir -type f -executable`
  for script in $scripts; do
    debug "running script: $script"
    source $script
  done
}

function install {
  git clone $REPO $DOTUP_HOME > /dev/null 2>&1
  mkdir -p $HOME/bin
  ln -sf $DOTUP_HOME/bin/dotup $HOME/bin/dotup
  run_scripts "$DOTUP_HOME/pre_install"
  link_files
  run_scripts "$DOTUP_HOME/post_install"
}

function update {
  pushd $DOTUP_HOME > /dev/null
  git pull --quiet
  popd > /dev/null
  link_files
}

function up {
  check_dependencies
  pushd $HOME > /dev/null
  if is_setup; then
    printf "dotup updating\n"
    update
    printf "dotup finished\n"
  else
    printf "dotup installing\n"
    install
    printf "dotup finished\n"
  fi
  popd > /dev/null
}

function add {
  while (($#)); do
    path=$1
    shift

    if [ X$path == Xdebug ]; then
      continue
    fi

    echo $path | grep '^./' > /dev/null 2>&1
    starts_with_dot_slash=$?

    echo $path | grep '^/' > /dev/null 2>&1
    starts_with_slash=$?

    if [ $starts_with_dot_slash -eq 0 ]; then
      path=$CWD/`echo $path | sed -e "s|./||"`
    elif [ $starts_with_slash -ne 0 ]; then
      path=$CWD/$path
    fi

    debug "adding $path\n"

    dir=`dirname $path | sed -e "s|$HOME||"`
    file=`basename $path`
    symlink_dest=$HOME$dir/$file

    mkdir -p $RESTORE_DIR$dir
    cp $path $RESTORE_DIR$dir

    mkdir -p $DOTFILE_DIR$dir
    mv $path $DOTFILE_DIR$dir

    ln -sf $DOTFILE_DIR$dir/$file $symlink_dest
  done
}

function push {
  pushd $DOTUP_HOME > /dev/null
  git push
  popd > /dev/null
}

function commit {
  pushd $DOTUP_HOME > /dev/null
  git add .
  git commit
  popd > /dev/null
}

function local_status {
  pushd $DOTUP_HOME > /dev/null
  git status -s
  popd > /dev/null
}

function remote_status {
  pushd $DOTUP_HOME > /dev/null
  git fetch > /dev/null 2>&1
  git_remote_changes='git log --no-merges --oneline ..origin/master'
  to_apply=`$git_remote_changes`
  if [ -n "$to_apply" ]; then
    printf "** Remote updates to apply\n"
    $git_remote_changes
    printf "\n"
  fi

  git_local_changes='git log --no-merges --oneline origin/master..'
  to_push=`$git_local_changes`
  if [ -n "$to_push" ]; then
    printf "** Changes not pushed to remote\n"
    $git_local_changes
    printf "\n"
  fi
  popd > /dev/null
}

function status {
  if [ X$command_arg == Xlocal ]; then
    local_status
  elif [ X$command_arg == Xremote ]; then
    remote_status
  else
    printf "Local changes\n\n"
    local_status
    printf "\n------------------------------------------------------------------------------\n"
    printf "\nRemote changes\n\n"
    remote_status
  fi
}

function cleanup {
  force=$1
  symlinks=`find $HOME -type l 2> /dev/null`
  for link in $symlinks; do
    src=`stat --format=%N $link | sed -e "s/^\\\`\([^']*\)'.*/\1/"`
    dest=`stat --format=%N $link | sed -e "s/.*\\\`\(.*\)'$/\1/"`
    echo $dest | grep $DOTUP_HOME > /dev/null 2>&1
    if [ $? -eq 0 ]; then
      if [ X$force == Xforce -o ! -r $dest ]; then
        if [ X$force == Xforce ]; then
          debug "* Removing link $src\n"
        else
          debug "* Removing dangling link $src\n"
        fi
        rm $src
      else
      debug "| Leaving $src\n"
      fi
    fi
  done
}

function remove {
  # Remove all symlinks
  cleanup force

  # Move restore files back into place
  if [ -d $RESTORE_DIR ]; then
    files=`find $RESTORE_DIR -type f`
    for path in $files; do
      dir=`dirname $path | sed -e "s|$RESTORE_DIR||"`
      file=`basename $path`
      dest=$HOME$dir/$file

      mkdir -p $HOME$dir

      if [ -f dest ]; then
        printf "Can't restore $src: it already exists\n"
        continue
      else
        debug "& restoring $dest\n"
        mv $path $dest
      fi
    done
  fi

  # Delete if no changes
  pushd $DOTUP_HOME > /dev/null
  local_changes=`git status -s`
  git_local_changes='git log --no-merges --oneline origin/master..'
  to_push=`$git_local_changes`
  popd > /dev/null

  if [ -z "$to_push" -a -z "$local_changes" ]; then
    rm -rf $DOTUP_HOME
    printf "\n$DOTUP_HOME removed\n"
    printf "bye bye\n"
  else
    printf "\n"
    printf "Can't remove $DOTUP_HOME: you have changes there\n"
    printf "(to see the changes run: $progname status)\n"
  fi
}

#------------------------------------------------------------------------------
# Argument processing
#------------------------------------------------------------------------------

if [ -z $command ]; then
  up
elif [ $command == "up" -o $command == "debug" ]; then
  up
elif [ $command == "status" ]; then
  status
elif [ $command == "cleanup" ]; then
  cleanup
elif [ $command == "remove" ]; then
  remove
elif [ $command == "add" ]; then
  shift
  add $@
elif [ $command == "commit" ]; then
  commit
elif [ $command == "push" ]; then
  push
elif [ $command == "-h" -o $command == "help" ]; then
  usage
else
  printf "Unrecognised command: $command\n\n"
  usage
fi

